package MAFIA.Game.Sound;

import android.content.Context;
import android.media.AudioAttributes;
import android.media.AudioManager;
import android.media.SoundPool;
import android.os.Build;

import MAFIA.Game.Settings.MSettings;

/**
 *
 */

public class MSoundEffects
{
    private Context context;
    private SoundPool soundPool;
    private int[] resIDs; // user should prepare this , it contains the resource Ids of audio files in "raw" folder
    private int[] soundsEffectsIDs; // this is generated by soundPool engine respective to given resource IDs Array
    MSettings userSettings;

    /**
     *
     * @param ctx current context
     * @param audioResources a int array containing raw music files like => [ R.raw.click01 , R.raw.setting01 , ... ]
     */
    public MSoundEffects(Context ctx , int[] audioResources)
    {
        context = ctx;
        resIDs = audioResources;
        userSettings = new MSettings(context);

        // check for device API version ...
        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)
        {
            AudioAttributes audioAttributes = new AudioAttributes.Builder()
                    .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC)
                    .setUsage(AudioAttributes.USAGE_GAME)
                    .build();

            soundPool = new SoundPool.Builder()
                    .setAudioAttributes(audioAttributes)
                    .setMaxStreams(5)
                    .build();
        }
        else
        {
            soundPool = new SoundPool(5, AudioManager.STREAM_MUSIC,0);
        }

        //load all audios into memory
        loadResources(resIDs);

    }

    /**
     * this function will load all audio files into memory and prepare them to be played
     * @param audioResources a int array containing raw music files like => [ R.raw.click01 , R.raw.setting01 , ... ]
     */
    public void loadResources(int[] audioResources)
    {
        soundsEffectsIDs = new int[audioResources.length];

        for(int i = 0 ; i < audioResources.length ; i++)
        {
            soundsEffectsIDs[i] = soundPool.load(context , audioResources[i] , 1);
        }
        resIDs = null;
    }

    public void play(int soundIndex)
    {
        if(!userSettings.isSoundFxEnabled() && soundIndex < soundsEffectsIDs.length) return;
        soundPool.play( soundsEffectsIDs[soundIndex] , 1.0f , 1.0f , 1 , 0 , 1.0f );
    }

    /**
     * @param soundIndex index of raw audio file to be played
     * @param loopCount loop count ,NOTE :  0 or 1 will play once  , -1 will play for infinite times
     */
    public void play(int soundIndex , int loopCount)
    {
        if(!userSettings.isSoundFxEnabled() && soundIndex < soundsEffectsIDs.length) return;
        soundPool.play( soundsEffectsIDs[soundIndex] , 1.0f , 1.0f , 1 , loopCount , 1.0f );
    }

    /**
     * @param speed its a float number in range of [ 0.5 , 2.0 ] that affects on audio playing speed
     */
    public void play(int soundIndex , float speed)
    {
        if(!userSettings.isSoundFxEnabled() && soundIndex < soundsEffectsIDs.length) return;
        soundPool.play( soundsEffectsIDs[soundIndex] , 1.0f , 1.0f , 1 , 0 , speed );
    }

    void dispose()
    {
        soundPool.release();
        resIDs = null;
        soundsEffectsIDs = null;
    }
}
